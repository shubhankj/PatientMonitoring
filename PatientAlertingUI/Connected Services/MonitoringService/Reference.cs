//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PatientAlertingUI.MonitoringService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VitalSign", Namespace="http://schemas.datacontract.org/2004/07/VitalSignLib")]
    [System.SerializableAttribute()]
    public partial class VitalSign : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPatientVitalSignEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PatientAlertingUI.MonitoringService.VitalSignType VitalSignTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPatientVitalSignEnabled {
            get {
                return this.IsPatientVitalSignEnabledField;
            }
            set {
                if ((this.IsPatientVitalSignEnabledField.Equals(value) != true)) {
                    this.IsPatientVitalSignEnabledField = value;
                    this.RaisePropertyChanged("IsPatientVitalSignEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PatientAlertingUI.MonitoringService.VitalSignType VitalSignType {
            get {
                return this.VitalSignTypeField;
            }
            set {
                if ((this.VitalSignTypeField.Equals(value) != true)) {
                    this.VitalSignTypeField = value;
                    this.RaisePropertyChanged("VitalSignType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VitalSignType", Namespace="http://schemas.datacontract.org/2004/07/VitalSignContractLib")]
    public enum VitalSignType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SPO2 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PulseRate = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Temperature = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MonitoringService.IController")]
    public interface IController {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IController/GenerateVitalSignAsJson", ReplyAction="http://tempuri.org/IController/GenerateVitalSignAsJsonResponse")]
        string GenerateVitalSignAsJson(string patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IController/GenerateVitalSignAsJson", ReplyAction="http://tempuri.org/IController/GenerateVitalSignAsJsonResponse")]
        System.Threading.Tasks.Task<string> GenerateVitalSignAsJsonAsync(string patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IController/EnableVitalSignForPatient", ReplyAction="http://tempuri.org/IController/EnableVitalSignForPatientResponse")]
        void EnableVitalSignForPatient(string patientId, PatientAlertingUI.MonitoringService.VitalSign[] m_vitalSigns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IController/EnableVitalSignForPatient", ReplyAction="http://tempuri.org/IController/EnableVitalSignForPatientResponse")]
        System.Threading.Tasks.Task EnableVitalSignForPatientAsync(string patientId, PatientAlertingUI.MonitoringService.VitalSign[] m_vitalSigns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IController/StorePatientVitalSignsInDB", ReplyAction="http://tempuri.org/IController/StorePatientVitalSignsInDBResponse")]
        void StorePatientVitalSignsInDB(string patientId, string m_jsonData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IController/StorePatientVitalSignsInDB", ReplyAction="http://tempuri.org/IController/StorePatientVitalSignsInDBResponse")]
        System.Threading.Tasks.Task StorePatientVitalSignsInDBAsync(string patientId, string m_jsonData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControllerChannel : PatientAlertingUI.MonitoringService.IController, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControllerClient : System.ServiceModel.ClientBase<PatientAlertingUI.MonitoringService.IController>, PatientAlertingUI.MonitoringService.IController {
        
        public ControllerClient() {
        }
        
        public ControllerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControllerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControllerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GenerateVitalSignAsJson(string patientId) {
            return base.Channel.GenerateVitalSignAsJson(patientId);
        }
        
        public System.Threading.Tasks.Task<string> GenerateVitalSignAsJsonAsync(string patientId) {
            return base.Channel.GenerateVitalSignAsJsonAsync(patientId);
        }
        
        public void EnableVitalSignForPatient(string patientId, PatientAlertingUI.MonitoringService.VitalSign[] m_vitalSigns) {
            base.Channel.EnableVitalSignForPatient(patientId, m_vitalSigns);
        }
        
        public System.Threading.Tasks.Task EnableVitalSignForPatientAsync(string patientId, PatientAlertingUI.MonitoringService.VitalSign[] m_vitalSigns) {
            return base.Channel.EnableVitalSignForPatientAsync(patientId, m_vitalSigns);
        }
        
        public void StorePatientVitalSignsInDB(string patientId, string m_jsonData) {
            base.Channel.StorePatientVitalSignsInDB(patientId, m_jsonData);
        }
        
        public System.Threading.Tasks.Task StorePatientVitalSignsInDBAsync(string patientId, string m_jsonData) {
            return base.Channel.StorePatientVitalSignsInDBAsync(patientId, m_jsonData);
        }
    }
}
