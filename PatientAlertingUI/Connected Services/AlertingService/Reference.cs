//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PatientAlertingUI.AlertingService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AlertingService.IAlertingController")]
    public interface IAlertingController {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ReadPatientVitalSigns", ReplyAction="http://tempuri.org/IAlertingController/ReadPatientVitalSignsResponse")]
        string ReadPatientVitalSigns(string patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ReadPatientVitalSigns", ReplyAction="http://tempuri.org/IAlertingController/ReadPatientVitalSignsResponse")]
        System.Threading.Tasks.Task<string> ReadPatientVitalSignsAsync(string patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ValidatePatientVitalSigns", ReplyAction="http://tempuri.org/IAlertingController/ValidatePatientVitalSignsResponse")]
        PatientAlertingUI.AlertingService.ValidatePatientVitalSignsResponse ValidatePatientVitalSigns(PatientAlertingUI.AlertingService.ValidatePatientVitalSignsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ValidatePatientVitalSigns", ReplyAction="http://tempuri.org/IAlertingController/ValidatePatientVitalSignsResponse")]
        System.Threading.Tasks.Task<PatientAlertingUI.AlertingService.ValidatePatientVitalSignsResponse> ValidatePatientVitalSignsAsync(PatientAlertingUI.AlertingService.ValidatePatientVitalSignsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ValidateSpo2", ReplyAction="http://tempuri.org/IAlertingController/ValidateSpo2Response")]
        string ValidateSpo2(string patientId, string m_spo2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ValidateSpo2", ReplyAction="http://tempuri.org/IAlertingController/ValidateSpo2Response")]
        System.Threading.Tasks.Task<string> ValidateSpo2Async(string patientId, string m_spo2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ValidatePulseRate", ReplyAction="http://tempuri.org/IAlertingController/ValidatePulseRateResponse")]
        string ValidatePulseRate(string patientId, string m_pulseRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ValidatePulseRate", ReplyAction="http://tempuri.org/IAlertingController/ValidatePulseRateResponse")]
        System.Threading.Tasks.Task<string> ValidatePulseRateAsync(string patientId, string m_pulseRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ValidateTemperature", ReplyAction="http://tempuri.org/IAlertingController/ValidateTemperatureResponse")]
        string ValidateTemperature(string patientId, string m_temperature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlertingController/ValidateTemperature", ReplyAction="http://tempuri.org/IAlertingController/ValidateTemperatureResponse")]
        System.Threading.Tasks.Task<string> ValidateTemperatureAsync(string patientId, string m_temperature);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidatePatientVitalSigns", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidatePatientVitalSignsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string patientId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string patientVitalSignAsJson;
        
        public ValidatePatientVitalSignsRequest() {
        }
        
        public ValidatePatientVitalSignsRequest(string patientId, string patientVitalSignAsJson) {
            this.patientId = patientId;
            this.patientVitalSignAsJson = patientVitalSignAsJson;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidatePatientVitalSignsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ValidatePatientVitalSignsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool ValidatePatientVitalSignsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string alertMessage;
        
        public ValidatePatientVitalSignsResponse() {
        }
        
        public ValidatePatientVitalSignsResponse(bool ValidatePatientVitalSignsResult, string alertMessage) {
            this.ValidatePatientVitalSignsResult = ValidatePatientVitalSignsResult;
            this.alertMessage = alertMessage;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlertingControllerChannel : PatientAlertingUI.AlertingService.IAlertingController, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlertingControllerClient : System.ServiceModel.ClientBase<PatientAlertingUI.AlertingService.IAlertingController>, PatientAlertingUI.AlertingService.IAlertingController {
        
        public AlertingControllerClient() {
        }
        
        public AlertingControllerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AlertingControllerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlertingControllerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AlertingControllerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ReadPatientVitalSigns(string patientId) {
            return base.Channel.ReadPatientVitalSigns(patientId);
        }
        
        public System.Threading.Tasks.Task<string> ReadPatientVitalSignsAsync(string patientId) {
            return base.Channel.ReadPatientVitalSignsAsync(patientId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PatientAlertingUI.AlertingService.ValidatePatientVitalSignsResponse PatientAlertingUI.AlertingService.IAlertingController.ValidatePatientVitalSigns(PatientAlertingUI.AlertingService.ValidatePatientVitalSignsRequest request) {
            return base.Channel.ValidatePatientVitalSigns(request);
        }
        
        public bool ValidatePatientVitalSigns(string patientId, string patientVitalSignAsJson, out string alertMessage) {
            PatientAlertingUI.AlertingService.ValidatePatientVitalSignsRequest inValue = new PatientAlertingUI.AlertingService.ValidatePatientVitalSignsRequest();
            inValue.patientId = patientId;
            inValue.patientVitalSignAsJson = patientVitalSignAsJson;
            PatientAlertingUI.AlertingService.ValidatePatientVitalSignsResponse retVal = ((PatientAlertingUI.AlertingService.IAlertingController)(this)).ValidatePatientVitalSigns(inValue);
            alertMessage = retVal.alertMessage;
            return retVal.ValidatePatientVitalSignsResult;
        }
        
        public System.Threading.Tasks.Task<PatientAlertingUI.AlertingService.ValidatePatientVitalSignsResponse> ValidatePatientVitalSignsAsync(PatientAlertingUI.AlertingService.ValidatePatientVitalSignsRequest request) {
            return base.Channel.ValidatePatientVitalSignsAsync(request);
        }
        
        public string ValidateSpo2(string patientId, string m_spo2) {
            return base.Channel.ValidateSpo2(patientId, m_spo2);
        }
        
        public System.Threading.Tasks.Task<string> ValidateSpo2Async(string patientId, string m_spo2) {
            return base.Channel.ValidateSpo2Async(patientId, m_spo2);
        }
        
        public string ValidatePulseRate(string patientId, string m_pulseRate) {
            return base.Channel.ValidatePulseRate(patientId, m_pulseRate);
        }
        
        public System.Threading.Tasks.Task<string> ValidatePulseRateAsync(string patientId, string m_pulseRate) {
            return base.Channel.ValidatePulseRateAsync(patientId, m_pulseRate);
        }
        
        public string ValidateTemperature(string patientId, string m_temperature) {
            return base.Channel.ValidateTemperature(patientId, m_temperature);
        }
        
        public System.Threading.Tasks.Task<string> ValidateTemperatureAsync(string patientId, string m_temperature) {
            return base.Channel.ValidateTemperatureAsync(patientId, m_temperature);
        }
    }
}
