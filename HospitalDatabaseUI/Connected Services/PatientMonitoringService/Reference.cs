//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalDatabaseUI.PatientMonitoringService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientDetails", Namespace="http://schemas.datacontract.org/2004/07/DataContractsLib")]
    [System.SerializableAttribute()]
    public partial class PatientDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientAgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PatientContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientGenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientAge {
            get {
                return this.PatientAgeField;
            }
            set {
                if ((this.PatientAgeField.Equals(value) != true)) {
                    this.PatientAgeField = value;
                    this.RaisePropertyChanged("PatientAge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PatientContact {
            get {
                return this.PatientContactField;
            }
            set {
                if ((this.PatientContactField.Equals(value) != true)) {
                    this.PatientContactField = value;
                    this.RaisePropertyChanged("PatientContact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientGender {
            get {
                return this.PatientGenderField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientGenderField, value) != true)) {
                    this.PatientGenderField = value;
                    this.RaisePropertyChanged("PatientGender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientName {
            get {
                return this.PatientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameField, value) != true)) {
                    this.PatientNameField = value;
                    this.RaisePropertyChanged("PatientName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PatientMonitoringService.IDataStore")]
    public interface IDataStore {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataStore/StorePatientVitalSigns", ReplyAction="http://tempuri.org/IDataStore/StorePatientVitalSignsResponse")]
        void StorePatientVitalSigns(string patientId, string m_jsonData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataStore/StorePatientVitalSigns", ReplyAction="http://tempuri.org/IDataStore/StorePatientVitalSignsResponse")]
        System.Threading.Tasks.Task StorePatientVitalSignsAsync(string patientId, string m_jsonData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataStoreChannel : HospitalDatabaseUI.PatientMonitoringService.IDataStore, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataStoreClient : System.ServiceModel.ClientBase<HospitalDatabaseUI.PatientMonitoringService.IDataStore>, HospitalDatabaseUI.PatientMonitoringService.IDataStore {
        
        public DataStoreClient() {
        }
        
        public DataStoreClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataStoreClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataStoreClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataStoreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StorePatientVitalSigns(string patientId, string m_jsonData) {
            base.Channel.StorePatientVitalSigns(patientId, m_jsonData);
        }
        
        public System.Threading.Tasks.Task StorePatientVitalSignsAsync(string patientId, string m_jsonData) {
            return base.Channel.StorePatientVitalSignsAsync(patientId, m_jsonData);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PatientMonitoringService.IPatientDbQuery")]
    public interface IPatientDbQuery {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetPatientID", ReplyAction="http://tempuri.org/IPatientDbQuery/GetPatientIDResponse")]
        string GetPatientID(long contactNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetPatientID", ReplyAction="http://tempuri.org/IPatientDbQuery/GetPatientIDResponse")]
        System.Threading.Tasks.Task<string> GetPatientIDAsync(long contactNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsPatientExists", ReplyAction="http://tempuri.org/IPatientDbQuery/IsPatientExistsResponse")]
        bool IsPatientExists(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsPatientExists", ReplyAction="http://tempuri.org/IPatientDbQuery/IsPatientExistsResponse")]
        System.Threading.Tasks.Task<bool> IsPatientExistsAsync(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetPatientDetails", ReplyAction="http://tempuri.org/IPatientDbQuery/GetPatientDetailsResponse")]
        HospitalDatabaseUI.PatientMonitoringService.PatientDetails GetPatientDetails(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetPatientDetails", ReplyAction="http://tempuri.org/IPatientDbQuery/GetPatientDetailsResponse")]
        System.Threading.Tasks.Task<HospitalDatabaseUI.PatientMonitoringService.PatientDetails> GetPatientDetailsAsync(int patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/UpdatePatientDetails", ReplyAction="http://tempuri.org/IPatientDbQuery/UpdatePatientDetailsResponse")]
        bool UpdatePatientDetails(int patientId, string patientName, string patientGender, int PatientAge, long contactNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/UpdatePatientDetails", ReplyAction="http://tempuri.org/IPatientDbQuery/UpdatePatientDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientDetailsAsync(int patientId, string patientName, string patientGender, int PatientAge, long contactNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetTotalNoOfBeds", ReplyAction="http://tempuri.org/IPatientDbQuery/GetTotalNoOfBedsResponse")]
        int GetTotalNoOfBeds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetTotalNoOfBeds", ReplyAction="http://tempuri.org/IPatientDbQuery/GetTotalNoOfBedsResponse")]
        System.Threading.Tasks.Task<int> GetTotalNoOfBedsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetTotalNoOfWards", ReplyAction="http://tempuri.org/IPatientDbQuery/GetTotalNoOfWardsResponse")]
        int GetTotalNoOfWards();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetTotalNoOfWards", ReplyAction="http://tempuri.org/IPatientDbQuery/GetTotalNoOfWardsResponse")]
        System.Threading.Tasks.Task<int> GetTotalNoOfWardsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetNoOfAvailableBeds", ReplyAction="http://tempuri.org/IPatientDbQuery/GetNoOfAvailableBedsResponse")]
        int GetNoOfAvailableBeds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetNoOfAvailableBeds", ReplyAction="http://tempuri.org/IPatientDbQuery/GetNoOfAvailableBedsResponse")]
        System.Threading.Tasks.Task<int> GetNoOfAvailableBedsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsContactNumberExists", ReplyAction="http://tempuri.org/IPatientDbQuery/IsContactNumberExistsResponse")]
        bool IsContactNumberExists(long contactNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsContactNumberExists", ReplyAction="http://tempuri.org/IPatientDbQuery/IsContactNumberExistsResponse")]
        System.Threading.Tasks.Task<bool> IsContactNumberExistsAsync(long contactNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/RegisterPatient", ReplyAction="http://tempuri.org/IPatientDbQuery/RegisterPatientResponse")]
        string RegisterPatient(long contactNumber, string patientName, string patientGender, int PatientAge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/RegisterPatient", ReplyAction="http://tempuri.org/IPatientDbQuery/RegisterPatientResponse")]
        System.Threading.Tasks.Task<string> RegisterPatientAsync(long contactNumber, string patientName, string patientGender, int PatientAge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsPatientAllocated", ReplyAction="http://tempuri.org/IPatientDbQuery/IsPatientAllocatedResponse")]
        bool IsPatientAllocated(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsPatientAllocated", ReplyAction="http://tempuri.org/IPatientDbQuery/IsPatientAllocatedResponse")]
        System.Threading.Tasks.Task<bool> IsPatientAllocatedAsync(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/AllocateResourceToPatient", ReplyAction="http://tempuri.org/IPatientDbQuery/AllocateResourceToPatientResponse")]
        bool AllocateResourceToPatient(long contactNumber, int patientId, string doctorName, string category, string disease, int wardNumber, int bedNumber, string indate, long emergencyContactNumber, string outdate, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/AllocateResourceToPatient", ReplyAction="http://tempuri.org/IPatientDbQuery/AllocateResourceToPatientResponse")]
        System.Threading.Tasks.Task<bool> AllocateResourceToPatientAsync(long contactNumber, int patientId, string doctorName, string category, string disease, int wardNumber, int bedNumber, string indate, long emergencyContactNumber, string outdate, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/InsertBedInformation", ReplyAction="http://tempuri.org/IPatientDbQuery/InsertBedInformationResponse")]
        void InsertBedInformation(int bedNumber, int wardNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/InsertBedInformation", ReplyAction="http://tempuri.org/IPatientDbQuery/InsertBedInformationResponse")]
        System.Threading.Tasks.Task InsertBedInformationAsync(int bedNumber, int wardNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsWardExist", ReplyAction="http://tempuri.org/IPatientDbQuery/IsWardExistResponse")]
        bool IsWardExist(int wardnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsWardExist", ReplyAction="http://tempuri.org/IPatientDbQuery/IsWardExistResponse")]
        System.Threading.Tasks.Task<bool> IsWardExistAsync(int wardnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsBedExist", ReplyAction="http://tempuri.org/IPatientDbQuery/IsBedExistResponse")]
        bool IsBedExist(int bedNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsBedExist", ReplyAction="http://tempuri.org/IPatientDbQuery/IsBedExistResponse")]
        System.Threading.Tasks.Task<bool> IsBedExistAsync(int bedNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/InsertWardInformation", ReplyAction="http://tempuri.org/IPatientDbQuery/InsertWardInformationResponse")]
        void InsertWardInformation(string wardType, int wardNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/InsertWardInformation", ReplyAction="http://tempuri.org/IPatientDbQuery/InsertWardInformationResponse")]
        System.Threading.Tasks.Task InsertWardInformationAsync(string wardType, int wardNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetAvailableBed", ReplyAction="http://tempuri.org/IPatientDbQuery/GetAvailableBedResponse")]
        HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedResponse GetAvailableBed(HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/GetAvailableBed", ReplyAction="http://tempuri.org/IPatientDbQuery/GetAvailableBedResponse")]
        System.Threading.Tasks.Task<HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedResponse> GetAvailableBedAsync(HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/UpdateBedInformation", ReplyAction="http://tempuri.org/IPatientDbQuery/UpdateBedInformationResponse")]
        void UpdateBedInformation(int bedNumber, int wardNumber, bool Availability);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/UpdateBedInformation", ReplyAction="http://tempuri.org/IPatientDbQuery/UpdateBedInformationResponse")]
        System.Threading.Tasks.Task UpdateBedInformationAsync(int bedNumber, int wardNumber, bool Availability);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/Discharge", ReplyAction="http://tempuri.org/IPatientDbQuery/DischargeResponse")]
        void Discharge(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/Discharge", ReplyAction="http://tempuri.org/IPatientDbQuery/DischargeResponse")]
        System.Threading.Tasks.Task DischargeAsync(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsBedAvailable", ReplyAction="http://tempuri.org/IPatientDbQuery/IsBedAvailableResponse")]
        bool IsBedAvailable(int bedNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/IsBedAvailable", ReplyAction="http://tempuri.org/IPatientDbQuery/IsBedAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsBedAvailableAsync(int bedNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/ClearPatientDB", ReplyAction="http://tempuri.org/IPatientDbQuery/ClearPatientDBResponse")]
        void ClearPatientDB();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDbQuery/ClearPatientDB", ReplyAction="http://tempuri.org/IPatientDbQuery/ClearPatientDBResponse")]
        System.Threading.Tasks.Task ClearPatientDBAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAvailableBed", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAvailableBedRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string wardType;
        
        public GetAvailableBedRequest() {
        }
        
        public GetAvailableBedRequest(string wardType) {
            this.wardType = wardType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAvailableBedResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAvailableBedResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetAvailableBedResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int wardNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int bedNumber;
        
        public GetAvailableBedResponse() {
        }
        
        public GetAvailableBedResponse(bool GetAvailableBedResult, int wardNumber, int bedNumber) {
            this.GetAvailableBedResult = GetAvailableBedResult;
            this.wardNumber = wardNumber;
            this.bedNumber = bedNumber;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientDbQueryChannel : HospitalDatabaseUI.PatientMonitoringService.IPatientDbQuery, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PatientDbQueryClient : System.ServiceModel.ClientBase<HospitalDatabaseUI.PatientMonitoringService.IPatientDbQuery>, HospitalDatabaseUI.PatientMonitoringService.IPatientDbQuery {
        
        public PatientDbQueryClient() {
        }
        
        public PatientDbQueryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PatientDbQueryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientDbQueryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientDbQueryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetPatientID(long contactNumber) {
            return base.Channel.GetPatientID(contactNumber);
        }
        
        public System.Threading.Tasks.Task<string> GetPatientIDAsync(long contactNumber) {
            return base.Channel.GetPatientIDAsync(contactNumber);
        }
        
        public bool IsPatientExists(int patientId) {
            return base.Channel.IsPatientExists(patientId);
        }
        
        public System.Threading.Tasks.Task<bool> IsPatientExistsAsync(int patientId) {
            return base.Channel.IsPatientExistsAsync(patientId);
        }
        
        public HospitalDatabaseUI.PatientMonitoringService.PatientDetails GetPatientDetails(int patientId) {
            return base.Channel.GetPatientDetails(patientId);
        }
        
        public System.Threading.Tasks.Task<HospitalDatabaseUI.PatientMonitoringService.PatientDetails> GetPatientDetailsAsync(int patientId) {
            return base.Channel.GetPatientDetailsAsync(patientId);
        }
        
        public bool UpdatePatientDetails(int patientId, string patientName, string patientGender, int PatientAge, long contactNumber) {
            return base.Channel.UpdatePatientDetails(patientId, patientName, patientGender, PatientAge, contactNumber);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientDetailsAsync(int patientId, string patientName, string patientGender, int PatientAge, long contactNumber) {
            return base.Channel.UpdatePatientDetailsAsync(patientId, patientName, patientGender, PatientAge, contactNumber);
        }
        
        public int GetTotalNoOfBeds() {
            return base.Channel.GetTotalNoOfBeds();
        }
        
        public System.Threading.Tasks.Task<int> GetTotalNoOfBedsAsync() {
            return base.Channel.GetTotalNoOfBedsAsync();
        }
        
        public int GetTotalNoOfWards() {
            return base.Channel.GetTotalNoOfWards();
        }
        
        public System.Threading.Tasks.Task<int> GetTotalNoOfWardsAsync() {
            return base.Channel.GetTotalNoOfWardsAsync();
        }
        
        public int GetNoOfAvailableBeds() {
            return base.Channel.GetNoOfAvailableBeds();
        }
        
        public System.Threading.Tasks.Task<int> GetNoOfAvailableBedsAsync() {
            return base.Channel.GetNoOfAvailableBedsAsync();
        }
        
        public bool IsContactNumberExists(long contactNumber) {
            return base.Channel.IsContactNumberExists(contactNumber);
        }
        
        public System.Threading.Tasks.Task<bool> IsContactNumberExistsAsync(long contactNumber) {
            return base.Channel.IsContactNumberExistsAsync(contactNumber);
        }
        
        public string RegisterPatient(long contactNumber, string patientName, string patientGender, int PatientAge) {
            return base.Channel.RegisterPatient(contactNumber, patientName, patientGender, PatientAge);
        }
        
        public System.Threading.Tasks.Task<string> RegisterPatientAsync(long contactNumber, string patientName, string patientGender, int PatientAge) {
            return base.Channel.RegisterPatientAsync(contactNumber, patientName, patientGender, PatientAge);
        }
        
        public bool IsPatientAllocated(int patientID) {
            return base.Channel.IsPatientAllocated(patientID);
        }
        
        public System.Threading.Tasks.Task<bool> IsPatientAllocatedAsync(int patientID) {
            return base.Channel.IsPatientAllocatedAsync(patientID);
        }
        
        public bool AllocateResourceToPatient(long contactNumber, int patientId, string doctorName, string category, string disease, int wardNumber, int bedNumber, string indate, long emergencyContactNumber, string outdate, bool status) {
            return base.Channel.AllocateResourceToPatient(contactNumber, patientId, doctorName, category, disease, wardNumber, bedNumber, indate, emergencyContactNumber, outdate, status);
        }
        
        public System.Threading.Tasks.Task<bool> AllocateResourceToPatientAsync(long contactNumber, int patientId, string doctorName, string category, string disease, int wardNumber, int bedNumber, string indate, long emergencyContactNumber, string outdate, bool status) {
            return base.Channel.AllocateResourceToPatientAsync(contactNumber, patientId, doctorName, category, disease, wardNumber, bedNumber, indate, emergencyContactNumber, outdate, status);
        }
        
        public void InsertBedInformation(int bedNumber, int wardNumber) {
            base.Channel.InsertBedInformation(bedNumber, wardNumber);
        }
        
        public System.Threading.Tasks.Task InsertBedInformationAsync(int bedNumber, int wardNumber) {
            return base.Channel.InsertBedInformationAsync(bedNumber, wardNumber);
        }
        
        public bool IsWardExist(int wardnumber) {
            return base.Channel.IsWardExist(wardnumber);
        }
        
        public System.Threading.Tasks.Task<bool> IsWardExistAsync(int wardnumber) {
            return base.Channel.IsWardExistAsync(wardnumber);
        }
        
        public bool IsBedExist(int bedNumber) {
            return base.Channel.IsBedExist(bedNumber);
        }
        
        public System.Threading.Tasks.Task<bool> IsBedExistAsync(int bedNumber) {
            return base.Channel.IsBedExistAsync(bedNumber);
        }
        
        public void InsertWardInformation(string wardType, int wardNumber) {
            base.Channel.InsertWardInformation(wardType, wardNumber);
        }
        
        public System.Threading.Tasks.Task InsertWardInformationAsync(string wardType, int wardNumber) {
            return base.Channel.InsertWardInformationAsync(wardType, wardNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedResponse HospitalDatabaseUI.PatientMonitoringService.IPatientDbQuery.GetAvailableBed(HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedRequest request) {
            return base.Channel.GetAvailableBed(request);
        }
        
        public bool GetAvailableBed(string wardType, out int wardNumber, out int bedNumber) {
            HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedRequest inValue = new HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedRequest();
            inValue.wardType = wardType;
            HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedResponse retVal = ((HospitalDatabaseUI.PatientMonitoringService.IPatientDbQuery)(this)).GetAvailableBed(inValue);
            wardNumber = retVal.wardNumber;
            bedNumber = retVal.bedNumber;
            return retVal.GetAvailableBedResult;
        }
        
        public System.Threading.Tasks.Task<HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedResponse> GetAvailableBedAsync(HospitalDatabaseUI.PatientMonitoringService.GetAvailableBedRequest request) {
            return base.Channel.GetAvailableBedAsync(request);
        }
        
        public void UpdateBedInformation(int bedNumber, int wardNumber, bool Availability) {
            base.Channel.UpdateBedInformation(bedNumber, wardNumber, Availability);
        }
        
        public System.Threading.Tasks.Task UpdateBedInformationAsync(int bedNumber, int wardNumber, bool Availability) {
            return base.Channel.UpdateBedInformationAsync(bedNumber, wardNumber, Availability);
        }
        
        public void Discharge(int patientID) {
            base.Channel.Discharge(patientID);
        }
        
        public System.Threading.Tasks.Task DischargeAsync(int patientID) {
            return base.Channel.DischargeAsync(patientID);
        }
        
        public bool IsBedAvailable(int bedNumber) {
            return base.Channel.IsBedAvailable(bedNumber);
        }
        
        public System.Threading.Tasks.Task<bool> IsBedAvailableAsync(int bedNumber) {
            return base.Channel.IsBedAvailableAsync(bedNumber);
        }
        
        public void ClearPatientDB() {
            base.Channel.ClearPatientDB();
        }
        
        public System.Threading.Tasks.Task ClearPatientDBAsync() {
            return base.Channel.ClearPatientDBAsync();
        }
    }
}
